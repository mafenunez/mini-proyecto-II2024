---
title: "Análisis comparativo canciones románticas en los años 60s y la actualidad"
author: Francisca Espinoza, María Fernanda Núñez y Beatriz Pinto
subtitle: Curso Métodos computacionales para las Ciencias Sociales
fontsize: 11pt
format:
  html:
    toc: true
    toc-location: right
    toc-depth: 2
    toc-expand: 2
    toc-title: Contenidos
    number-sections: false
    number-depth: 6
    theme:
      - sandstone
      - pp.scss
    title-block-banner: true
editor: visual
---

# Relevancia

# Fuente de información: Genius

Genius, es una aplicación y página web fundada en el año 2009, considerada como una de las bases de datos de letras y conocimientos musicales más completas y consolidadas actualmente. Si bien en sus inicios se centraba en exhibir letras de canciones de Rap y Hip-Hop, con el pasar de los años decidió ampliar su alcance, abarcando así diversos géneros y llegando a ofrecer un extenso repertorio de más de 8 millones de canciones de diferentes estilos e idiomas. Adicionalmente, la plataforma no solo proporciona letras de canciones, sino también información completa sobre álbumes, artistas, historias detrás de las composiciones, noticias de última hora, entre otros (Genius, 2009).

# Código para extraer la información

Este código inicial es necesario para comenzar a trabajar en la sesión. Primero, instalamos el paquete "remotes" que utilizaremos para descargar el paquete "geniusr" desde github.

```{r, librerias, echo=TRUE}
# instalar paquetes
#install.packages("remotes")
#library(remotes)

#remotes::install_github("giovanni-cutri/geniusr")
library(geniusr)

```

Con el paquete "geniusr" cargado,

```{r, token, echo=T}
# crear token
Sys.setenv(GENIUS_API_TOKEN = "WdpkaOPzecLuH0-EF30G2mF-i2jGtzCWydOUWwSnoILDwHK5OTc5Cc2NH9nRTMWG")

print(Sys.getenv("GENIUS_API_TOKEN"))
genius_token()
```

```{r, canciones, echo=TRUE}
# subimos canciones
canciones_2010 <- read.csv2("../input/data/canciones2010.csv", encoding = "utf-8")
canciones_1960 <- read.csv2("../input/data/canciones1960.csv", encoding = "utf-8")

```

## Función 

```{r, funcion, echo=TRUE}
# crear función
  # borrar paréntesis y signos de puntuación / solo dejar texto
sacar_letras <- function(nombre_cancion, nombre_artista){
  cancion <- search_song(paste0(nombre_cancion, nombre_artista))
  url_cancion <- cancion$song_lyrics_url[1] #de todas las opciones, se selecciona la primera opción 
  letra <- get_lyrics_url(url_cancion)
  plain_text <- paste(letra$line, collapse = " ")
  return(plain_text)
}
```

```{r, letras, echo=TRUE}
# crear listados de letras

lista_letras_2010 <- list()

for (i in 1 : nrow(canciones_2010)) {
  lyrics <- sacar_letras(canciones_2010$nombre_cancion[i], canciones_2010$nombre_artista[i])
  lista_letras_2010 <- append(lista_letras_2010, lyrics)
}

lista_letras_1960 <- list()

for (i in 1 : nrow(canciones_1960)) {
  lyrics <- sacar_letras(canciones_1960$nombre_cancion[i], canciones_1960$nombre_artista[i])
  lista_letras_1960 <- append(lista_letras_1960, lyrics)
}

```

```{r, echo=TRUE}

# get lyric bigrams
  unnest_tokens(bigram, line, token = "ngrams", n = 2) %>%
  # look for good morning
  filter(bigram == "good morning") %>% 
  # count bigram frequency
  nrow()
```

```{r, echo=TRUE}
# get lyrics
  get_lyrics_search(artist_name = "J Balvin & Bad Bunny",
                    song_title = "LA CANCIÓN")  
  
  sacar_letras(canciones_1960[[1]][28], canciones_1960[[2]][28])
  
  search_song(paste0("estas cosas del amor", "leonardo favio"))
```


# Análisis descriptivo
